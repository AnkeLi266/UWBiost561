main = paste("n =", n_vals[i]),
xlab = "Empirical Mean",
ylab = "Frequency")
}
# Add title across the whole plot area, inside
title("Figure 1: Distribution of empirical means for different n",
outer = FALSE, line = -1, cex.main = 1.2)
set.seed(1)
mean(generate_data(n=10))
set.seed(1)
n_vals <- c(1, 2, 3, 5, 10, 100)
means_list <- vector("list", length(n_vals))
for (i in seq_along(n_vals)) {
n <- n_vals[i]
means_list[[i]] <- replicate(10000, mean(generate_data(n)))
}
# Plot setup
par(mfrow = c(2, 3), mar = c(4, 4, 2, 1)) # 2 rows x 3 columns, adjust margins
for (i in seq_along(n_vals)) {
hist(means_list[[i]],
breaks = 100,
main = paste("n =", n_vals[i]),
xlab = "Empirical Mean",
ylab = "Frequency")
}
# Overall title
mtext("Figure 1: Distribution of empirical means for different n",
outer = TRUE, line = -0.5, cex = 1)
set.seed(1)
mean(generate_data(n=10))
set.seed(1)
n_vals <- c(1, 2, 3, 5, 10, 100)
means_list <- vector("list", length(n_vals))
for (i in seq_along(n_vals)) {
n <- n_vals[i]
means_list[[i]] <- replicate(10000, mean(generate_data(n)))
}
# Set up the plotting layout and margins
par(mfrow = c(2, 3), mar = c(4, 4, 2, 1), oma = c(3, 0, 0, 0))
# oma sets outer margins: bottom, left, top, right
# Plot histograms
for (i in seq_along(n_vals)) {
hist(means_list[[i]],
breaks = 100,
main = paste("n =", n_vals[i]),
xlab = "Empirical Mean",
ylab = "Frequency")
}
# Add title at the bottom
mtext("Figure 1: Distribution of empirical means for different n",
side = 1, outer = TRUE, line = 1.5, cex = 1.2)
df <- read.csv("https://raw.githubusercontent.com/linnykos/561_s2025_public/main/HW1_files/sea-ad.csv")
head(df)
summary(df)
dim(df)    # Get number of rows and columns
class(df)  # Get the class of the data frame
# Step 1: Replace "90+" with "90"
df$Age.at.Death[df$Age.at.Death == "90+"] <- "90"
# Step 2: Convert Age.at.Death to numeric
df$Age.at.Death <- as.numeric(df$Age.at.Death)
# Step 3: Plot histogram
hist(df$Age.at.Death,
main = "Histogram of Age at Death",
xlab = "Age at Death",
ylab = "Frequency",
col = "lightblue",
border = "white")
# Convert character columns to factors
df$Sex <- as.factor(df$Sex)
df$APOE4.Status <- as.factor(df$APOE4.Status)
df$Cognitive.Status <- as.factor(df$Cognitive.Status)
df$Braak <- as.factor(df$Braak)
summary(df)
table(df$Braak, df$Cognitive.Status)
# Step 1: Define quantile breakpoints
quantiles <- quantile(df$Last.CASI.Score, probs = seq(0, 1, 0.25), na.rm = TRUE)
# Step 2: Use cut() to assign each score to a quantile bin
CASI.quantile.group <- cut(df$Last.CASI.Score, breaks = quantiles, include.lowest = TRUE)
# Step 3: Cross-tabulate with Cognitive.Status
table(CASI.quantile.group, df$Cognitive.Status)
# Step 1: Replace "90+" with "90"
df$Age.at.Death[df$Age.at.Death == "90+"] <- "90"
# Step 2: Convert Age.at.Death to numeric
df$Age.at.Death <- as.numeric(df$Age.at.Death)
# Step 3: Plot histogram
hist(df$Age.at.Death,
main = "Histogram of Age at Death",
xlab = "Age at Death",
ylab = "Frequency",
col = "lightblue",
border = "white")
rmarkdown::render("vignettes/HW1.Rmd")
install.packages("tidyverse")
usethis::use_vignette("HW2")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
set.seed(10)
library(bookdown)
library(tidyverse)
library(ggplot2)
country_population <- readr::read_csv("https://raw.githubusercontent.com/linnykos/561_s2025_public/main/HW2_files/country_population.csv")
country_population
country_birth <- readr::read_csv("https://raw.githubusercontent.com/linnykos/561_s2025_public/main/HW2_files/country_birth.csv")
country_birth
library(tidyverse)
population_summary <- country_population %>%
filter(year >= 1990, year <= 2010) %>%
group_by(country) %>%
summarize(mean_population = mean(population, na.rm = TRUE))
population_summary
library(tidyverse)
country_population_summary <- country_population %>%
filter(year >= 1990, year <= 2010) %>%
group_by(iso3c, country) %>%
summarize(mean_population = mean(population, na.rm = TRUE), .groups = "drop")
country_population_summary
country_birth_summary <- country_birth %>%
filter(year >= 1990, year <= 2010) %>%
select(iso3c, year, life_expect) %>%
drop_na() %>%
group_by(iso3c) %>%
summarize(
max_life_expect = max(life_expect),
min_life_expect = min(life_expect),
.groups = "drop"
) %>%
mutate(range_life_expect = max_life_expect - min_life_expect)
country_birth_summary
country_both <- inner_join(country_population, country_birth, by = "iso3c")
# First 10 rows:
country_both %>% head(10)
# Number of rows and columns:
dim(country_both)
country_both <- inner_join(country_population, country_birth, by = "iso3c")
country_both %>% head(10)
dim(country_both)
penguins <- readr::read_csv("https://raw.githubusercontent.com/linnykos/561_s2025_public/main/HW2_files/palmerpenguins.csv")
penguins
library(tidyverse)
penguins %>%
ggplot(aes(x = bill_depth_mm, y = bill_length_mm, color = species)) +
geom_point() +
scale_color_manual(values = c("Adelie" = "cornflowerblue",
"Chinstrap" = "coral2",
"Gentoo" = "goldenrod3")) +
labs(
x = "Bill Depth (mm)",
y = "Bill length (mm)",
title = paste("Relation among", nrow(penguins), "penguins")
)
penguins %>%
ggplot(aes(x = bill_depth_mm, y = bill_length_mm)) +
geom_point()
library(tidyverse)
penguins %>%
ggplot(aes(x = bill_depth_mm, y = bill_length_mm, color = species)) +
geom_point() +
scale_color_manual(values = c("Adelie" = "cornflowerblue",
"Chinstrap" = "coral2",
"Gentoo" = "goldenrod3")) +
labs(
x = "Bill Depth (mm)",
y = "Bill length (mm)",
title = paste("Relation among", nrow(penguins), "penguins")
)
penguins %>%
ggplot(aes(x = bill_depth_mm, y = bill_length_mm, color = species)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", se = TRUE) +
facet_wrap(~species) +
scale_color_manual(values = c("Adelie" = "cornflowerblue",
"Chinstrap" = "coral2",
"Gentoo" = "goldenrod3")) +
labs(
x = "Bill Depth (mm)",
y = "Bill length (mm)",
title = paste("Relation among", nrow(penguins), "penguins")
)
penguins %>%
ggplot(aes(x = bill_depth_mm, y = bill_length_mm, color = species)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", se = TRUE, alpha = 0.2) +
facet_wrap(~species) +
scale_color_manual(values = c("Adelie" = "cornflowerblue",
"Chinstrap" = "coral2",
"Gentoo" = "goldenrod3")) +
labs(
x = "Bill Depth (mm)",
y = "Bill length (mm)",
title = paste("Relation among", nrow(penguins), "penguins")
) +
theme_bw()
source("https://raw.githubusercontent.com/linnykos/561_s2025_public/main/HW2_files/random_graph_functions.R")
set.seed(0)
result <- generate_random_graph(n = 20,
clique_fraction = 0.5,
density_low = 0.1)
adj_mat <- result$adj_mat
dim(adj_mat)
adj_mat[1:5,1:5]
mat_long <- pivot_longer_heatmap(adj_mat)
mat_long
library(tidyverse)
# heatmap visualization
ggplot(mat_long, aes(x = name, y = row, fill = factor(value))) +
geom_tile(color = "white") +
scale_fill_manual(values = c("0" = "palegoldenrod", "1" = "coral2")) +
coord_fixed() +
labs(x = "Column", y = "Row", fill = "Value",
title = "Heatmap of adj_mat") +
theme_minimal()
library(tidyverse)
# Corrected heatmap visualization
ggplot(mat_long, aes(x = col, y = row, fill = factor(value))) +
geom_tile(color = "white") +
scale_fill_manual(values = c("0" = "palegoldenrod", "1" = "coral2")) +
coord_fixed() +
labs(x = "Column", y = "Row", fill = "Value",
title = "Heatmap of adj_mat") +
theme_minimal()
print(mat_long)
library(tidyverse)
library(tidyverse)
ggplot(mat_long, aes(x = Y, y = X, fill = factor(Value))) +
geom_tile(color = "white") +
scale_fill_manual(values = c("0" = "palegoldenrod", "1" = "coral2")) +
coord_fixed() +
labs(x = "Column", y = "Row", fill = "Value",
title = "Heatmap of adj_mat") +
theme_minimal()
adj_mat2 <- result$adj_mat[result$rev_order, result$rev_order]
mat_long2 <- pivot_longer_heatmap(adj_mat2)
ggplot(mat_long2, aes(x = Y, y = X, fill = factor(Value))) +
geom_tile(color = "white") +
scale_fill_manual(values = c("0" = "palegoldenrod", "1" = "coral2")) +
coord_fixed() +
labs(x = "Column", y = "Row", fill = "Value",
title = "Heatmap of permuted adj_mat2") +
theme_minimal()
getwd()
bookdown::render_book("HW2.Rmd", output_format = "html_document2")
### Question 0A
### Question 0A
devtools::document()
devtools::install()
library(UWBiost561)
set.seed(0)
simulation <- UWBiost561::generate_partial_clique(
n = 10,
clique_fraction = 0.5,
clique_edge_density = 0.9
)
library(UWBiost561)
set.seed(0)
simulation <- UWBiost561::generate_partial_clique(
n = 10,
clique_fraction = 0.5,
clique_edge_density = 0.9
)
devtools::document()
devtools::document()
xdevtools::load_all()
devtools::load_all()
?generate_partial_clique
roxygen2::roxygenise()
devtools::document()
devtools::install()
library(UWBiost561)
generate_partial_clique(n = 10, clique_fraction = 0.5, clique_edge_density = 0.9)
library(UWBiost561)
set.seed(0)
simulation <- UWBiost561::generate_partial_clique(
n = 10,
clique_fraction = 0.5,
clique_edge_density = 0.9
)
simulation$adj_mat
devtools::document()
devtools::install()
library(UWBiost561)
set.seed(0)
simulation <- UWBiost561::generate_partial_clique(
n = 10,
clique_fraction = 0.5,
clique_edge_density = 0.9
)
library(UWBiost561)
set.seed(0)
simulation <- UWBiost561::generate_partial_clique(
n = 10,
clique_fraction = 0.5,
clique_edge_density = 0.9
)
library(UWBiost561)
UWBiost561::generate_partial_clique(
n = 10,
clique_fraction = 0.5,
clique_edge_density = 0.9
)
generate_partial_clique(n = 10, clique_fraction = 0.5, clique_edge_density = 0.9)
remove.packages("UWBiost561")
devtools::document()
library(UWBiost561)
set.seed(0)
simulation <- UWBiost561::generate_partial_clique(
n = 10,
clique_fraction = 0.5,
clique_edge_density = 0.9
)
simulation$adj_mat
devtools::check()
1+1
library(testthat)
# Test 1
test_that("output list contains clique_idx and edge_density", {
set.seed(1)
adj <- generate_partial_clique(10, 0.5, 0.9)$adj_mat
res <- compute_maximal_partial_clique12(adj, alpha = 0.8)
expect_named(res, c("clique_idx", "edge_density"))
})
# Test 2
test_that("clique_idx values are valid node indices", {
set.seed(2)
adj <- generate_partial_clique(12, 0.5, 0.9)$adj_mat
res <- compute_maximal_partial_clique12(adj, alpha = 0.8)
expect_true(all(res$clique_idx %% 1 == 0))
expect_true(all(res$clique_idx >= 1 & res$clique_idx <= nrow(adj)))
})
# Test 3
test_that("edge density is >= alpha", {
set.seed(3)
adj <- generate_partial_clique(10, 0.5, 0.9)$adj_mat
res <- compute_maximal_partial_clique12(adj, alpha = 0.85)
expect_true(res$edge_density >= 0.85)
})
# Test 4
test_that("function errors with bad adj_mat input", {
bad_mat <- matrix(runif(25), nrow = 5)
diag(bad_mat) <- 1
expect_error(compute_maximal_partial_clique12(bad_mat, 0.9))
})
# Test 5
test_that("function errors if alpha is out of bounds", {
adj <- generate_partial_clique(10, 0.5, 0.9)$adj_mat
expect_error(compute_maximal_partial_clique12(adj, alpha = 1.5))
})
library(testthat)
# Test 1
test_that("output list contains clique_idx and edge_density", {
set.seed(1)
adj <- generate_partial_clique(10, 0.5, 0.9)$adj_mat
res <- compute_maximal_partial_clique13(adj, alpha = 0.8)
expect_named(res, c("clique_idx", "edge_density"))
})
# Test 2
test_that("clique_idx values are valid node indices", {
set.seed(2)
adj <- generate_partial_clique(12, 0.5, 0.9)$adj_mat
res <- compute_maximal_partial_clique13(adj, alpha = 0.8)
expect_true(all(res$clique_idx %% 1 == 0))
expect_true(all(res$clique_idx >= 1 & res$clique_idx <= nrow(adj)))
})
# Test 3
test_that("edge density is >= alpha", {
set.seed(3)
adj <- generate_partial_clique(10, 0.5, 0.9)$adj_mat
res <- compute_maximal_partial_clique13(adj, alpha = 0.85)
expect_true(res$edge_density >= 0.85)
})
# Test 4
test_that("function errors with bad adj_mat input", {
bad_mat <- matrix(runif(25), nrow = 5)
diag(bad_mat) <- 1
expect_error(compute_maximal_partial_clique13(bad_mat, 0.9))
})
# Test 5
test_that("function errors if alpha is out of bounds", {
adj <- generate_partial_clique(10, 0.5, 0.9)$adj_mat
expect_error(compute_maximal_partial_clique13(adj, alpha = 1.5))
})
devtools::install()
library(UWBiost561)
UWBiost561::compute_maximal_partial_clique13
devtools::document()   # 生成 NAMESPACE 文件并导出新函数
devtools::document()
install.packages("pkgload")
devtools::document()
devtools::install()
library(UWBiost561)
UWBiost561::compute_maximal_partial_clique13
library(testthat)
# Test 1
test_that("output list contains clique_idx and edge_density", {
set.seed(1)
adj <- generate_partial_clique(10, 0.5, 0.9)$adj_mat
res <- compute_maximal_partial_clique13(adj, alpha = 0.8)
expect_named(res, c("clique_idx", "edge_density"))
})
# Test 2
test_that("clique_idx values are valid node indices", {
set.seed(2)
adj <- generate_partial_clique(12, 0.5, 0.9)$adj_mat
res <- compute_maximal_partial_clique13(adj, alpha = 0.8)
expect_true(all(res$clique_idx %% 1 == 0))
expect_true(all(res$clique_idx >= 1 & res$clique_idx <= nrow(adj)))
})
# Test 3
test_that("edge density is >= alpha", {
set.seed(3)
adj <- generate_partial_clique(10, 0.5, 0.9)$adj_mat
res <- compute_maximal_partial_clique13(adj, alpha = 0.85)
expect_true(res$edge_density >= 0.85)
})
# Test 4
test_that("function errors with bad adj_mat input", {
bad_mat <- matrix(runif(25), nrow = 5)
diag(bad_mat) <- 1
expect_error(compute_maximal_partial_clique13(bad_mat, 0.9))
})
# Test 5
test_that("function errors if alpha is out of bounds", {
adj <- generate_partial_clique(10, 0.5, 0.9)$adj_mat
expect_error(compute_maximal_partial_clique13(adj, alpha = 1.5))
})
library(testthat)
# Test 1
test_that("output list contains clique_idx and edge_density", {
set.seed(1)
adj <- generate_partial_clique(10, 0.5, 0.9)$adj_mat
res <- compute_maximal_partial_clique12(adj, alpha = 0.8)
expect_named(res, c("clique_idx", "edge_density"))
})
# Test 2
test_that("clique_idx values are valid node indices", {
set.seed(2)
adj <- generate_partial_clique(12, 0.5, 0.9)$adj_mat
res <- compute_maximal_partial_clique12(adj, alpha = 0.8)
expect_true(all(res$clique_idx %% 1 == 0))
expect_true(all(res$clique_idx >= 1 & res$clique_idx <= nrow(adj)))
})
# Test 3
test_that("edge density is >= alpha", {
set.seed(3)
adj <- generate_partial_clique(10, 0.5, 0.9)$adj_mat
res <- compute_maximal_partial_clique12(adj, alpha = 0.85)
expect_true(res$edge_density >= 0.85)
})
# Test 4
test_that("function errors with bad adj_mat input", {
bad_mat <- matrix(runif(25), nrow = 5)
diag(bad_mat) <- 1
expect_error(compute_maximal_partial_clique12(bad_mat, 0.9))
})
# Test 5
test_that("function errors if alpha is out of bounds", {
adj <- generate_partial_clique(10, 0.5, 0.9)$adj_mat
expect_error(compute_maximal_partial_clique12(adj, alpha = 1.5))
})
library(UWBiost561)
set.seed(10)
data <- UWBiost561::generate_partial_clique(n = 10,
clique_fraction = 0.5,
clique_edge_density = 0.95)
set.seed(10)
result1 <- UWBiost561::compute_maximal_partial_clique_master(
adj_mat = data$adj_mat,
alpha = 0.95,
number = 11,
time_limit = 30
)
result1
set.seed(10)
result2 <- UWBiost561::compute_maximal_partial_clique11(
adj_mat = data$adj_mat,
alpha = 0.95
)
result2
set.seed(123)
data <- UWBiost561::generate_partial_clique(n = 48, clique_fraction = 0.7, clique_edge_density = 0.85)
result <- UWBiost561::compute_maximal_partial_clique_master(
adj_mat = data$adj_mat,
alpha = 0.85,
number = 12,   # 任选一个实现
time_limit = 1 # 只给1秒
)
result
devtools::check()
devtools::document()
devtools::document()
devtools::install()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::document()
devtools::install()
devtools::check()
devtools::document()
devtools::document()
devtools::document()
install.packages("dplyr")
devtools::document()
devtools::document()
devtools::install()
devtools::check()
devtools::document()
remove.packages("UWBiost561")
devtools::install()
devtools::install()
remove.packages("UWBiost561")
