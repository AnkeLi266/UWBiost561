generate_partial_clique(n = 10, clique_fraction = 0.5, clique_edge_density = 0.9)
remove.packages("UWBiost561")
devtools::document()
library(UWBiost561)
set.seed(0)
simulation <- UWBiost561::generate_partial_clique(
n = 10,
clique_fraction = 0.5,
clique_edge_density = 0.9
)
simulation$adj_mat
devtools::check()
1+1
library(testthat)
# Test 1
test_that("output list contains clique_idx and edge_density", {
set.seed(1)
adj <- generate_partial_clique(10, 0.5, 0.9)$adj_mat
res <- compute_maximal_partial_clique12(adj, alpha = 0.8)
expect_named(res, c("clique_idx", "edge_density"))
})
# Test 2
test_that("clique_idx values are valid node indices", {
set.seed(2)
adj <- generate_partial_clique(12, 0.5, 0.9)$adj_mat
res <- compute_maximal_partial_clique12(adj, alpha = 0.8)
expect_true(all(res$clique_idx %% 1 == 0))
expect_true(all(res$clique_idx >= 1 & res$clique_idx <= nrow(adj)))
})
# Test 3
test_that("edge density is >= alpha", {
set.seed(3)
adj <- generate_partial_clique(10, 0.5, 0.9)$adj_mat
res <- compute_maximal_partial_clique12(adj, alpha = 0.85)
expect_true(res$edge_density >= 0.85)
})
# Test 4
test_that("function errors with bad adj_mat input", {
bad_mat <- matrix(runif(25), nrow = 5)
diag(bad_mat) <- 1
expect_error(compute_maximal_partial_clique12(bad_mat, 0.9))
})
# Test 5
test_that("function errors if alpha is out of bounds", {
adj <- generate_partial_clique(10, 0.5, 0.9)$adj_mat
expect_error(compute_maximal_partial_clique12(adj, alpha = 1.5))
})
library(testthat)
# Test 1
test_that("output list contains clique_idx and edge_density", {
set.seed(1)
adj <- generate_partial_clique(10, 0.5, 0.9)$adj_mat
res <- compute_maximal_partial_clique13(adj, alpha = 0.8)
expect_named(res, c("clique_idx", "edge_density"))
})
# Test 2
test_that("clique_idx values are valid node indices", {
set.seed(2)
adj <- generate_partial_clique(12, 0.5, 0.9)$adj_mat
res <- compute_maximal_partial_clique13(adj, alpha = 0.8)
expect_true(all(res$clique_idx %% 1 == 0))
expect_true(all(res$clique_idx >= 1 & res$clique_idx <= nrow(adj)))
})
# Test 3
test_that("edge density is >= alpha", {
set.seed(3)
adj <- generate_partial_clique(10, 0.5, 0.9)$adj_mat
res <- compute_maximal_partial_clique13(adj, alpha = 0.85)
expect_true(res$edge_density >= 0.85)
})
# Test 4
test_that("function errors with bad adj_mat input", {
bad_mat <- matrix(runif(25), nrow = 5)
diag(bad_mat) <- 1
expect_error(compute_maximal_partial_clique13(bad_mat, 0.9))
})
# Test 5
test_that("function errors if alpha is out of bounds", {
adj <- generate_partial_clique(10, 0.5, 0.9)$adj_mat
expect_error(compute_maximal_partial_clique13(adj, alpha = 1.5))
})
devtools::install()
library(UWBiost561)
UWBiost561::compute_maximal_partial_clique13
devtools::document()   # 生成 NAMESPACE 文件并导出新函数
devtools::document()
install.packages("pkgload")
devtools::document()
devtools::install()
library(UWBiost561)
UWBiost561::compute_maximal_partial_clique13
library(testthat)
# Test 1
test_that("output list contains clique_idx and edge_density", {
set.seed(1)
adj <- generate_partial_clique(10, 0.5, 0.9)$adj_mat
res <- compute_maximal_partial_clique13(adj, alpha = 0.8)
expect_named(res, c("clique_idx", "edge_density"))
})
# Test 2
test_that("clique_idx values are valid node indices", {
set.seed(2)
adj <- generate_partial_clique(12, 0.5, 0.9)$adj_mat
res <- compute_maximal_partial_clique13(adj, alpha = 0.8)
expect_true(all(res$clique_idx %% 1 == 0))
expect_true(all(res$clique_idx >= 1 & res$clique_idx <= nrow(adj)))
})
# Test 3
test_that("edge density is >= alpha", {
set.seed(3)
adj <- generate_partial_clique(10, 0.5, 0.9)$adj_mat
res <- compute_maximal_partial_clique13(adj, alpha = 0.85)
expect_true(res$edge_density >= 0.85)
})
# Test 4
test_that("function errors with bad adj_mat input", {
bad_mat <- matrix(runif(25), nrow = 5)
diag(bad_mat) <- 1
expect_error(compute_maximal_partial_clique13(bad_mat, 0.9))
})
# Test 5
test_that("function errors if alpha is out of bounds", {
adj <- generate_partial_clique(10, 0.5, 0.9)$adj_mat
expect_error(compute_maximal_partial_clique13(adj, alpha = 1.5))
})
library(testthat)
# Test 1
test_that("output list contains clique_idx and edge_density", {
set.seed(1)
adj <- generate_partial_clique(10, 0.5, 0.9)$adj_mat
res <- compute_maximal_partial_clique12(adj, alpha = 0.8)
expect_named(res, c("clique_idx", "edge_density"))
})
# Test 2
test_that("clique_idx values are valid node indices", {
set.seed(2)
adj <- generate_partial_clique(12, 0.5, 0.9)$adj_mat
res <- compute_maximal_partial_clique12(adj, alpha = 0.8)
expect_true(all(res$clique_idx %% 1 == 0))
expect_true(all(res$clique_idx >= 1 & res$clique_idx <= nrow(adj)))
})
# Test 3
test_that("edge density is >= alpha", {
set.seed(3)
adj <- generate_partial_clique(10, 0.5, 0.9)$adj_mat
res <- compute_maximal_partial_clique12(adj, alpha = 0.85)
expect_true(res$edge_density >= 0.85)
})
# Test 4
test_that("function errors with bad adj_mat input", {
bad_mat <- matrix(runif(25), nrow = 5)
diag(bad_mat) <- 1
expect_error(compute_maximal_partial_clique12(bad_mat, 0.9))
})
# Test 5
test_that("function errors if alpha is out of bounds", {
adj <- generate_partial_clique(10, 0.5, 0.9)$adj_mat
expect_error(compute_maximal_partial_clique12(adj, alpha = 1.5))
})
library(UWBiost561)
set.seed(10)
data <- UWBiost561::generate_partial_clique(n = 10,
clique_fraction = 0.5,
clique_edge_density = 0.95)
set.seed(10)
result1 <- UWBiost561::compute_maximal_partial_clique_master(
adj_mat = data$adj_mat,
alpha = 0.95,
number = 11,
time_limit = 30
)
result1
set.seed(10)
result2 <- UWBiost561::compute_maximal_partial_clique11(
adj_mat = data$adj_mat,
alpha = 0.95
)
result2
set.seed(123)
data <- UWBiost561::generate_partial_clique(n = 48, clique_fraction = 0.7, clique_edge_density = 0.85)
result <- UWBiost561::compute_maximal_partial_clique_master(
adj_mat = data$adj_mat,
alpha = 0.85,
number = 12,   # 任选一个实现
time_limit = 1 # 只给1秒
)
result
devtools::check()
devtools::document()
devtools::document()
devtools::install()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::document()
devtools::install()
devtools::check()
devtools::document()
devtools::document()
devtools::document()
install.packages("dplyr")
devtools::document()
devtools::document()
devtools::install()
devtools::check()
devtools::document()
remove.packages("UWBiost561")
devtools::install()
devtools::install()
remove.packages("UWBiost561")
install.packages("yaml")
pkgdown::build_site()
unlink("docs", recursive = TRUE)
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
rm man/compute_maximal_partial_clique6.Rd
devtools::document()
devtools::document()
devtools::check()
pkgdown::build_site()
devtools::document()
devtools::check()
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
devtools::document()
unlink("man/compute_maximal_partial_clique6.Rd")
devtools::document()
pkgdown::build_site()
unlink("man", recursive = TRUE)
devtools::document()
pkgdown::build_site()
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
'/Users/ankeli/Documents/Rstudio/UWBiost561/docs/reference/compute_maximal_partial_clique6.Rd' does not exist.
# 在 R console 里运行
unlink("man/compute_maximal_partial_clique6.Rd")
unlink("docs", recursive = TRUE)
devtools::document()
pkgdown::build_site()
# This is version for May-15 (version 1)
#' Master file for computing maximal partial clique
#'
#' This function runs a implementation (dictated by \code{number}) using the inputs
#' \code{adj_mat} and \code{alpha}. For example, \code{compute_maximal_partial_clique_master(adj_mat, alpha, number = 5)}
#' executes \code{compute_maximal_partial_clique5(adj_mat, alpha)}.
#'
#' If the implementation errors (i.e., crashes), then the output \code{status} will be \code{error}.
#' If the implementation did not complete within \code{time_limit} number of seconds (i.e., took too long), then the output \code{status} will be \code{timed_out}.
#'
#' The `valid` output is a boolean on whether or not the provided `clique_idx`
#' forms a valid partial clique. If the method had status `timed_out` or `error`,
#' the method would (by default) have a `valid=FALSE`.
#'
#' @param adj_mat a symmetric `matrix` with only values `0` or `1`, has `1`'s along its diagonal, has no row- or column-names, and will have between 5 to 50  rows/columns (inclusive)
#' @param alpha a single `numeric` (i.e., a length of 1), and has a value between 0.5 and 1 (inclusive)
#' @param number an implementation number to use
#' @param time_limit the number of seconds the implementation has before it times out
#'
#' @return a list with `clique_idx`, `edge_density` (which are from the implementation itself)
#' and `status` and `valid` (which are added by this function)
#' @export
compute_maximal_partial_clique_master <- function(adj_mat,
alpha,
number,
time_limit = 30){
stopifnot(number %in% c(1:15))
# see https://stackoverflow.com/questions/1743698/evaluate-expression-given-as-a-string
string <- paste0("compute_maximal_partial_clique", number,
"(adj_mat = adj_mat, alpha = alpha)")
result <- .interruptor(eval(parse(text = string)),
time_limit = time_limit)
if("status" %in% names(result) && result$status == "error"){
result <- list(clique_idx = NA,
edge_density = NA,
status = "error")
} else if("status" %in% names(result) && result$status == "timed_out"){
result <- list(clique_idx = NA,
edge_density = NA,
status = "timed_out")
} else if(any(is.na(result$clique_idx)) ||
any(is.nan(result$clique_idx)) ||
any(!is.numeric(result$clique_idx)) ||
!("clique_idx" %in% names(result))){
result <- list(clique_idx = NA,
edge_density = NA,
status = "error")
} else {
result$status <- "completed"
}
# check if it's a valid partial clique
if(!all(is.na(result$clique_idx)) &&
all(result$clique_idx %% 1 == 0) &&
all(result$clique_idx > 0) &&
length(result$clique_idx) <= nrow(adj_mat)){
true_density <- compute_correct_density(adj_mat = adj_mat,
clique_idx = result$clique_idx)
valid <- (true_density >= alpha)
} else {
valid <- FALSE
}
result$valid <- valid
return(result)
}
#' Compute the correct density, given a set of nodes
#'
#' We will define a \code{clique_idx} of length 1 to have a density of 1.
#'
#' @param adj_mat a symmetric `matrix` with only values `0` or `1`, has `1`'s along its diagonal, has no row- or column-names, and will have between 5 to 50  rows/columns (inclusive).
#' @param clique_idx a `numeric` vector of index numbers corresponding to the nodes (i.e., values between 1 and `nrow(adj_mat)`) that your function deems to be in the maximum partial clique. This vector cannot have duplicate elements, must be positive integers, and the largest value cannot exceed `nrow(adj_mat)`
#'
#' @return a numeric, which is the density of edges among \code{adj_mat[clique_idx,clique_idx]}
#' @export
compute_correct_density <- function(adj_mat, clique_idx){
if(length(clique_idx) == 0 ||
any(is.na(clique_idx)) ||
any(is.nan(clique_idx)) ||
any(!is.numeric(clique_idx))) return(0)
stopifnot(is.matrix(adj_mat),
nrow(adj_mat) == ncol(adj_mat),
sum(abs(adj_mat - t(adj_mat))) <= 1e-6,
all(diag(adj_mat) == 1),
all(adj_mat %in% c(0,1)),
all(clique_idx %% 1 == 0),
all(clique_idx > 0),
length(clique_idx) <= nrow(adj_mat))
clique_idx <- unique(clique_idx)
n <- nrow(adj_mat)
m <- length(clique_idx)
if(m == 1) return(1)
numerator <- (sum(adj_mat[clique_idx, clique_idx]) - m)/2
denominator <- m*(m-1)/2
return(numerator/denominator)
}
#######
# from https://stackoverflow.com/questions/34346619/how-to-stop-a-function-in-r-that-is-taking-too-long-and-give-it-an-alternative
.interruptor <- function(FUN, time_limit) {
setTimeLimit(cpu = time_limit, elapsed = time_limit, transient = TRUE)
on.exit({
setTimeLimit(cpu = Inf, elapsed = Inf, transient = FALSE)
})
start_time <- Sys.time()
result <- tryCatch({
FUN
}, error = function(e) {
return(list(status = "timed_out"))
})
end_time <- Sys.time()
diff_time <- difftime(end_time, start_time, units = "secs")
# account for a small fudge factor
if(diff_time < 29 && "status" %in% names(result) && result$status == "timed_out"){
return(list(status = "error"))
} else if (diff_time > 29 && "status" %in% names(result) && result$status == "timed_out"){
return(list(status = "timed_out"))
} else {
return(result)
}
}
devtools::document()
devtools::check()
devtools::document()
devtools::check()
pkgdown::build_site()
unlink("man/compute_maximal_partial_clique7.Rd")
devtools::document()
pkgdown::build_site()
devtools::document()
setwd("~/Documents/Rstudio/UWBiost561_backup")
devtools::document()
devtools::check()
pkgdown::build_site()
library(UWBiost561)
set.seed(123)
sim <- generate_partial_clique(
n = 10,
clique_fraction = 0.5,
clique_edge_density = 0.8
)
adj_mat <- sim$adj_mat
print(adj_mat)
dim(adj_mat)
# 1. 找最大 partial clique
result <- compute_maximal_partial_clique7(
adj_mat = adj_mat,
alpha = 0.7
)
cat("Nodes in maximal partial clique:", result$clique_idx, "\n")
cat("Edge density in clique:", result$edge_density, "\n")
# 2. 跑模拟实验
sim_results <- simulate_partial_clique_study(
n_values = c(10, 20),
alpha_values = c(0.7, 0.9),
n_trials = 2,      # 数量可以自己调小，跑得快点
time_limit = 3
)
head(sim_results)
devtools::build_vignettes()
devtools::document()
devtools::build_vignettes()
pkgdown::build_site()
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
# 1. 找最大 partial clique
result <- compute_maximal_partial_clique7(
adj_mat = adj_mat,
alpha = 0.7
)
cat("Nodes in maximal partial clique:", result$clique_idx, "\n")
cat("Edge density in clique:", result$edge_density, "\n")
# 2. 跑模拟实验
sim_results <- simulate_partial_clique_study(
n_values = c(10, 20),
alpha_values = c(0.7, 0.9),
n_trials = 2,      # 数量可以自己调小，跑得快点
time_limit = 3
)
head(sim_results)
# 1. 找最大 partial clique
#result <- compute_maximal_partial_clique7(
result <- test_partial_clique7(
adj_mat = adj_mat,
alpha = 0.7
)
cat("Nodes in maximal partial clique:", result$clique_idx, "\n")
cat("Edge density in clique:", result$edge_density, "\n")
# 1. 找最大 partial clique
#result <- compute_maximal_partial_clique7(
result <- test_partial_clique7(
adj_mat = adj_mat,
alpha = 0.7
)
cat("Nodes in maximal partial clique:", result$clique_idx, "\n")
cat("Edge density in clique:", result$edge_density, "\n")
# 1. 找最大 partial clique
#result <- compute_maximal_partial_clique7(
result <- test_partial_clique7(
adj_mat = adj_mat,
alpha = 0.7
)
cat("Nodes in maximal partial clique:", result$clique_idx, "\n")
cat("Edge density in clique:", result$edge_density, "\n")
# 1. 找最大 partial clique
#result <- compute_maximal_partial_clique7(
result <- test_partial_clique7(
adj_mat = adj_mat,
alpha = 0.7
)
cat("Nodes in maximal partial clique:", result$clique_idx, "\n")
cat("Edge density in clique:", result$edge_density, "\n")
library(UWBiost561)
set.seed(123)
sim <- generate_partial_clique(
n = 10,
clique_fraction = 0.5,
clique_edge_density = 0.8
)
adj_mat <- sim$adj_mat
print(adj_mat)
dim(adj_mat)
# 1. 找最大 partial clique
#result <- compute_maximal_partial_clique7(
result <- test_partial_clique7(
adj_mat = adj_mat,
alpha = 0.7
)
cat("Nodes in maximal partial clique:", result$clique_idx, "\n")
cat("Edge density in clique:", result$edge_density, "\n")
# 1. 找最大 partial clique
#result <- compute_maximal_partial_clique7(
result <- test_partial_clique(
adj_mat = adj_mat,
alpha = 0.7
)
# 1. 找最大 partial clique
#result <- compute_maximal_partial_clique7(
result <- test_partial_clique7(
adj_mat = adj_mat,
alpha = 0.7
)
cat("Nodes in maximal partial clique:", result$clique_idx, "\n")
cat("Edge density in clique:", result$edge_density, "\n")
unlink("man/*")
devtools::document()
pkgdown::build_site()
unlink("man/*")
devtools::document()
pkgdown::build_site()
unlink("man/*")
devtools::document()
pkgdown::build_site()
library(UWBiost561)
set.seed(123)
sim <- generate_partial_clique(
n = 10,
clique_fraction = 0.5,
clique_edge_density = 0.8
)
adj_mat <- sim$adj_mat
print(adj_mat)
dim(adj_mat)
unlink("man/*")
devtools::document()
pkgdown::build_site()
unlink("man/*")
devtools::document()
pkgdown::build_site()
install.packages("roxygen2")
install.packages("roxygen2")
